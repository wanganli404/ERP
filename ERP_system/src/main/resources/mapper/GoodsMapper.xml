<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hnun.erp.mapper.GoodsMapper">
  <resultMap id="BaseResultMap" type="com.hnun.erp.bean.Goods">
    <id column="UUID" jdbcType="INTEGER" property="uuid" />
    <result column="NAME" jdbcType="VARCHAR" property="name" />
    <result column="ORIGIN" jdbcType="VARCHAR" property="origin" />
    <result column="PRODUCER" jdbcType="VARCHAR" property="producer" />
    <result column="UNIT" jdbcType="VARCHAR" property="unit" />
    <result column="INPRICE" jdbcType="DOUBLE" property="inprice" />
    <result column="OUTPRICE" jdbcType="DOUBLE" property="outprice" />
    <result column="GOODSTYPEUUID" jdbcType="INTEGER" property="goodstypeuuid" />
  </resultMap>
  
   <resultMap id="BaseResultMapWithgoodstype" type="com.hnun.erp.bean.Goods">
    <id column="UUID" jdbcType="INTEGER" property="uuid" />
    <result column="NAME" jdbcType="VARCHAR" property="name" />
    <result column="ORIGIN" jdbcType="VARCHAR" property="origin" />
    <result column="PRODUCER" jdbcType="VARCHAR" property="producer" />
    <result column="UNIT" jdbcType="VARCHAR" property="unit" />
    <result column="INPRICE" jdbcType="DOUBLE" property="inprice" />
    <result column="OUTPRICE" jdbcType="DOUBLE" property="outprice" />
    <result column="GOODSTYPEUUID" jdbcType="INTEGER" property="goodstypeuuid" />
     <association property="goodstype" javaType="com.hnun.erp.bean.Goodstype">
       <id column="goodstypeuuid" property="uuid"/>
       <result column="goodstypename" property="name"/>
    </association>
  </resultMap>
  
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    UUID, NAME, ORIGIN, PRODUCER, UNIT, INPRICE, OUTPRICE, GOODSTYPEUUID
  </sql>
  <select id="selectByExample" parameterType="com.hnun.erp.bean.GoodsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from goods
    where UUID = #{uuid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from goods
    where UUID = #{uuid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.hnun.erp.bean.GoodsExample">
    delete from goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.hnun.erp.bean.Goods">
    insert into goods (UUID, NAME, ORIGIN, 
      PRODUCER, UNIT, INPRICE, 
      OUTPRICE, GOODSTYPEUUID)
    values (#{uuid,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{origin,jdbcType=VARCHAR}, 
      #{producer,jdbcType=VARCHAR}, #{unit,jdbcType=VARCHAR}, #{inprice,jdbcType=DOUBLE}, 
      #{outprice,jdbcType=DOUBLE}, #{goodstypeuuid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.hnun.erp.bean.Goods">
    insert into goods
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uuid != null">
        UUID,
      </if>
      <if test="name != null">
        NAME,
      </if>
      <if test="origin != null">
        ORIGIN,
      </if>
      <if test="producer != null">
        PRODUCER,
      </if>
      <if test="unit != null">
        UNIT,
      </if>
      <if test="inprice != null">
        INPRICE,
      </if>
      <if test="outprice != null">
        OUTPRICE,
      </if>
      <if test="goodstypeuuid != null">
        GOODSTYPEUUID,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uuid != null">
        #{uuid,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="origin != null">
        #{origin,jdbcType=VARCHAR},
      </if>
      <if test="producer != null">
        #{producer,jdbcType=VARCHAR},
      </if>
      <if test="unit != null">
        #{unit,jdbcType=VARCHAR},
      </if>
      <if test="inprice != null">
        #{inprice,jdbcType=DOUBLE},
      </if>
      <if test="outprice != null">
        #{outprice,jdbcType=DOUBLE},
      </if>
      <if test="goodstypeuuid != null">
        #{goodstypeuuid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.hnun.erp.bean.GoodsExample" resultType="java.lang.Long">
    select count(*) from goods
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update goods
    <set>
      <if test="record.uuid != null">
        UUID = #{record.uuid,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        NAME = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.origin != null">
        ORIGIN = #{record.origin,jdbcType=VARCHAR},
      </if>
      <if test="record.producer != null">
        PRODUCER = #{record.producer,jdbcType=VARCHAR},
      </if>
      <if test="record.unit != null">
        UNIT = #{record.unit,jdbcType=VARCHAR},
      </if>
      <if test="record.inprice != null">
        INPRICE = #{record.inprice,jdbcType=DOUBLE},
      </if>
      <if test="record.outprice != null">
        OUTPRICE = #{record.outprice,jdbcType=DOUBLE},
      </if>
      <if test="record.goodstypeuuid != null">
        GOODSTYPEUUID = #{record.goodstypeuuid,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update goods
    set UUID = #{record.uuid,jdbcType=INTEGER},
      NAME = #{record.name,jdbcType=VARCHAR},
      ORIGIN = #{record.origin,jdbcType=VARCHAR},
      PRODUCER = #{record.producer,jdbcType=VARCHAR},
      UNIT = #{record.unit,jdbcType=VARCHAR},
      INPRICE = #{record.inprice,jdbcType=DOUBLE},
      OUTPRICE = #{record.outprice,jdbcType=DOUBLE},
      GOODSTYPEUUID = #{record.goodstypeuuid,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.hnun.erp.bean.Goods">
    update goods
    <set>
      <if test="name != null">
        NAME = #{name,jdbcType=VARCHAR},
      </if>
      <if test="origin != null">
        ORIGIN = #{origin,jdbcType=VARCHAR},
      </if>
      <if test="producer != null">
        PRODUCER = #{producer,jdbcType=VARCHAR},
      </if>
      <if test="unit != null">
        UNIT = #{unit,jdbcType=VARCHAR},
      </if>
      <if test="inprice != null">
        INPRICE = #{inprice,jdbcType=DOUBLE},
      </if>
      <if test="outprice != null">
        OUTPRICE = #{outprice,jdbcType=DOUBLE},
      </if>
      <if test="goodstypeuuid != null">
        GOODSTYPEUUID = #{goodstypeuuid,jdbcType=INTEGER},
      </if>
    </set>
    where UUID = #{uuid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.hnun.erp.bean.Goods">
    update goods
    set NAME = #{name,jdbcType=VARCHAR},
      ORIGIN = #{origin,jdbcType=VARCHAR},
      PRODUCER = #{producer,jdbcType=VARCHAR},
      UNIT = #{unit,jdbcType=VARCHAR},
      INPRICE = #{inprice,jdbcType=DOUBLE},
      OUTPRICE = #{outprice,jdbcType=DOUBLE},
      GOODSTYPEUUID = #{goodstypeuuid,jdbcType=INTEGER}
    where UUID = #{uuid,jdbcType=INTEGER}
  </update>
  
   <select id="getListByPage" parameterType="java.util.HashMap" resultMap="BaseResultMapWithgoodstype">
    select 
   goods.*,goodstype.uuid as goodstypeuuid, goodstype.name as goodstypename
    from goods left join goodstype on goods.goodstypeuuid=goodstype.uuid
   <where>    
            <if test="t.name != null and t.name !=''">     
                and goods.name = #{t.name}     
            </if>       
            <if test="t.origin != null and t.origin !=''">     
                and goods.origin = #{t.origin}     
            </if> 
            <if test="t.producer != null and t.producer !=''">     
                and goods.producer = #{t.producer}     
            </if>    
             <if test="t.unit != null and t.unit !=''">     
                and goods.unit = #{t.unit}     
            </if>    
              <if test="t.goodstypeuuid != null and t.goodstypeuuid !=''">     
                and goods.goodstypeuuid = #{t.goodstypeuuid}     
            </if>   
             <if test="q.startInprice != null and q.startInprice !=''">     
                and goods.inprice &gt;= #{q.startInprice}     
            </if>    
             <if test="q.endInprice != null and q.endInprice !=''">     
                and goods.inprice &lt;=  #{q.endInprice}     
            </if>    
            
              <if test="q.startOutprice != null and q.startOutprice !=''">     
                and goods.outprice &gt;= #{q.startOutprice}     
            </if>    
             <if test="q.endOutprice != null and q.endOutprice !=''">     
                and goods.outprice &lt;=  #{q.endOutprice}     
            </if>    
            
             <if test="t.unit != null and t.unit !=''">     
                and goods.unit = #{t.unit}     
            </if>    
            
             
              
    </where>    
    ORDER BY UUID asc
    <if test="page != null">
     LIMIT ${(page.page-1)*page.rows},${page.rows}; 
    </if>
  </select>
  
   <select id="findList"  resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from goods
  </select>
  
  <select id="count"  parameterType="java.lang.Long" resultType="java.lang.Long">
    select count(*) from goods
  </select>
  
  
</mapper>